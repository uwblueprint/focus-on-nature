openapi: 3.0.0
info:
  version: 1.0.0
  title: UW Blueprint Starter Code TypeScript API
  description: An API for the TypeScript Backend of Starter Code

# Authentication
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
  schemas:
    PasswordLogin:
      type: object
      required:
        - email, password
      properties:
        email:
          type: string
        password:
          type: string
    OAuthLogin:
      type: object
      required:
        - idToken
      properties:
        idToken:
          type: string

paths:
  /auth/login:
    post:
      tags:
        - Auth
      description: Login user. Supply either both email and password, or an Google OAuth idToken.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/PasswordLogin"
                - $ref: "#/components/schemas/OAuthLogin"
      responses:
        "200":
          description: Returns access token in response body and sets refreshToken as an httpOnly cookie
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  id:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                  role:
                    type: string
                  active:
                    type: boolean
        "500":
          description: Invalid request

  /auth/register:
    post:
      tags:
        - Auth
      description: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email, password, firstName, lastName
              properties:
                email:
                  type: string
                password:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
      responses:
        "200":
          description: Returns access token in response body and sets refreshToken as an httpOnly cookie
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  id:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                  role:
                    type: string
        "500":
          description: Invalid request

  /auth/refresh:
    post:
      security:
        - bearerAuth: []
      tags:
        - Auth
      description: Refresh auth credentials
      responses:
        "200":
          description: Returns access token in response body and sets refreshToken as an httpOnly cookie
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        "401":
          description: Unauthorized
        "500":
          description: Invalid request

  /auth/logout/{userid}:
    post:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userid
          required: true
          schema:
            # type: integer (postgres)
            # minimum: 1
            type: string
          description: The user ID
      tags:
        - Auth
      description: Logout as user
      responses:
        "204":
          description: Revokes all of the specified user's refresh tokens
        "401":
          description: Unauthorized
        "500":
          description: Invalid request

  /auth/resetPassword/{email}:
    post:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: email
          required: true
          schema:
            type: string
      tags:
        - Auth
      description: Triggers password reset for user with specified email (reset link will be emailed)
      responses:
        "204":
          description: Successfully sent password reset email
        "401":
          description: Unauthorized
        "500":
          description: Invalid request

  /users:
    get:
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: userId
          schema:
            # type: integer (postgres)
            # minimum: 1
            type: string
          description: The user ID
        - in: query
          name: email
          schema:
            type: string
          description: The user's email
      tags:
        - User
      description: Get all users, optionally filter by a userId or email query parameter to retrieve a single user
      responses:
        "200":
          description: Successfully returned a list of users, or a user filtered by id or email
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - id, firstName, lastName, email, role
                  properties:
                    id:
                      type: string
                    firstName:
                      type: string
                    lastName:
                      type: string
                    email:
                      type: string
                    role:
                      type: string
        "400":
          description: Cannot query by both user and email
        "401":
          description: Unauthorized
        "500":
          description: Invalid request

    post:
      security:
        - bearerAuth: []
      tags:
        - User
      description: Create new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName, lastName, role, email
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                role:
                  type: string
                  enum: ["Admin", "CampCoordinator"]
                email:
                  type: string
                active:
                  type: boolean
      responses:
        "201":
          description: Successfully created a new user
          content:
            application/json:
              schema:
                type: object
                required:
                  - id, firstName, lastName, email, role
                properties:
                  id:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                  role:
                    type: string
        "401":
          description: Unauthorized
        "500":
          description: Invalid request

    delete:
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: userId
          schema:
            # type: integer (postgres)
            # minimum: 1
            type: string
          description: The user ID
        - in: query
          name: email
          schema:
            type: string
          description: The user's email
      tags:
        - User
      description: Deletes a user by userId or email, specified through a query parameter
      responses:
        "204":
          description: Succesfully deleted user
        "400":
          description: Cannot query by both userId and email, invalid userId or email, userId or email is not a string, userId or email not supplied
        "401":
          description: Unauthorized
        "500":
          description: Invalid request

  /users/{userId}:
    put:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            # type: integer (postgres)
            # minimum: 1
            type: string
          description: The user ID
      tags:
        - User
      description: Update the user with the specified userId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName, lastName, role, email
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                role:
                  type: string
                  enum: ["Admin", "CampCoordinator"]
                email:
                  type: string
                active:
                  type: boolean
      responses:
        "200":
          description: Successfully updated user
          content:
            application/json:
              schema:
                type: object
                required:
                  - id, firstName, lastName, email, role
                properties:
                  id:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                  role:
                    type: string
        "401":
          description: Unauthorized
        "500":
          description: Invalid request
